using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;

namespace AmsiProvider;

[GeneratedComClass]
internal partial class AntimalwareProvider : IAntimalwareProvider
{
    private const int STRSAFE_E_INSUFFICIENT_BUFFER = unchecked((int)0x8007007AL);

    public int Scan(
        [MarshalAs(UnmanagedType.Interface)] IAmsiStream? stream)
    {
        const int AMSI_ATTRIBUTE_APP_NAME = 0;

        Dll.Log("Scan");
        try
        {
            if (stream is null)
            {
                Dll.Log("Scan stream null");
                return 0;
            }

            int res = stream.GetAttribute(AMSI_ATTRIBUTE_APP_NAME, 0, IntPtr.Zero, out int appNameSize);
            if (res != STRSAFE_E_INSUFFICIENT_BUFFER)
            {
                throw new Win32Exception(res & 0xFFFF);
            }

            string appName = "";
            nint buffer = Marshal.AllocCoTaskMem(appNameSize);
            try
            {
                res = stream.GetAttribute(AMSI_ATTRIBUTE_APP_NAME, appNameSize, buffer, out int _);
                if (res != 0)
                {
                    throw new Win32Exception(res & 0xFFFF);
                }

                appName = Marshal.PtrToStringUni(buffer) ?? "";
            }
            finally
            {
                Marshal.FreeCoTaskMem(buffer);
            }

            Dll.Log($"Scan - AppName '{appName}'");
        }
        catch (Exception e)
        {
            Dll.Log($"Scan failure\n{e}");
            throw;
        }

        return (int)AmsiResult.NotDetected;
    }

    public void CloseSession(
        long session)
    {
        Dll.Log($"CloseSession {session}");
    }

    public string DisplayName()
    {
        Dll.Log("DisplayName");
        return Dll.ProviderName;
    }
}

enum AmsiResult
{
    Clean = 0,
    NotDetected = 1,
    BlockedByAdminStart = 16384,
    BlockedByAdminEnd = 20479,
    Detected = 32768,
}
