using AmsiProvider.Com;
using System;
using System.Buffers;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Text;

namespace AmsiProvider;

[GeneratedComClass]
internal partial class AntimalwareProvider : IAntimalwareProvider2
{
    public unsafe int Scan(
        [MarshalAs(UnmanagedType.Interface)] IAmsiStream stream)
    {
        Dll.Log("Scan");
        try
        {
            string? appName = GetStreamAttributeString(stream, AmsiAttribute.AMSI_ATTRIBUTE_APP_NAME);
            string? contentName = GetStreamAttributeString(stream, AmsiAttribute.AMSI_ATTRIBUTE_CONTENT_NAME);
            long contentSize = GetStreamAttributeLong(stream, AmsiAttribute.AMSI_ATTRIBUTE_CONTENT_SIZE);
            nint contentAddr = GetStreamAttributePtr(stream, AmsiAttribute.AMSI_ATTRIBUTE_CONTENT_ADDRESS);
            nint session = GetStreamAttributePtr(stream, AmsiAttribute.AMSI_ATTRIBUTE_SESSION);
            long chainSize = GetStreamAttributeLong(stream, AmsiAttribute.AMSI_ATTRIBUTE_REDIRECT_CHAIN_SIZE);
            nint chainAddr = GetStreamAttributePtr(stream, AmsiAttribute.AMSI_ATTRIBUTE_REDIRECT_CHAIN_ADDRESS);
            long allSize = GetStreamAttributeLong(stream, AmsiAttribute.AMSI_ATTRIBUTE_ALL_SIZE);
            nint allAddr = GetStreamAttributePtr(stream, AmsiAttribute.AMSI_ATTRIBUTE_ALL_ADDRESS);

            Dll.Log($"Scan\n\tAppName: '{appName}'\n\tContentName: '{contentName}'\n\tContentSize: {contentSize}\n\tSession: 0x{session.ToInt64():X8}\n\tContentAddress: 0x{contentAddr.ToInt64():X8}\n\tChainSize: {chainSize}\n\tChainAddress: 0x{chainAddr.ToInt64():X8}\n\tAllSize: {allSize}\n\tAllAddress: 0x{allAddr.ToInt64():X8}");

            if (contentAddr == nint.Zero)
            {
                throw new NotImplementedException("IAmsiStream.Read() not yet implemented");
            }
            else
            {
                ReadOnlySpan<char> contentView = new((void*)contentAddr, (int)contentSize / 2);
                string content = new(contentView);
                Dll.Log($"Scan content\n\t{content}");
            }
        }
        catch (Exception e)
        {
            Dll.Log($"Scan failure\n{e}");
            throw;
        }

        return (int)AmsiResult.AMSI_RESULT_NOT_DETECTED;
    }

    public void CloseSession(
        long session)
    {
        Dll.Log($"CloseSession {session}");
    }

    public string DisplayName()
    {
        Dll.Log("DisplayName");
        return Dll.ProviderName;
    }

    private long GetStreamAttributeLong(IAmsiStream stream, AmsiAttribute attribute)
    {
        Span<long> buffer = stackalloc long[1];
        unsafe
        {
            fixed (long* bufferPtr = buffer)
            {
                int res = stream.GetAttribute(
                    (int)attribute,
                    Marshal.SizeOf<long>(),
                    (nint)bufferPtr,
                    out int _);
                if (res == ComReturnValue.E_NOTIMPL)
                {
                    return 0;
                }
                else if (res != 0)
                {
                    throw new Win32Exception(res);
                }
            }
        }

        return buffer[0];
    }

    private nint GetStreamAttributePtr(IAmsiStream stream, AmsiAttribute attribute)
    {
        Span<nint> buffer = stackalloc nint[1];
        unsafe
        {
            fixed (nint* bufferPtr = buffer)
            {
                int res = stream.GetAttribute(
                    (int)attribute,
                    nint.Size,
                    (nint)bufferPtr,
                    out int _);
                if (res == ComReturnValue.E_NOTIMPL)
                {
                    return nint.Zero;
                }
                else if (res != 0)
                {
                    throw new Win32Exception(res);
                }
            }
        }

        return buffer[0];
    }

    private string? GetStreamAttributeString(IAmsiStream stream, AmsiAttribute attribute)
    {
        int res = stream.GetAttribute((int)attribute, 0, IntPtr.Zero, out int size);
        if (res == ComReturnValue.E_INVALIDARG)
        {
            return null;
        }
        else if (res != ComReturnValue.E_NOT_SUFFICIENT_BUFFER)
        {
            throw new Win32Exception(res & 0xFFFF);
        }

        nint buffer = Marshal.AllocCoTaskMem(size);
        try
        {
            res = stream.GetAttribute((int)attribute, size, buffer, out int _);
            if (res != 0)
            {
                throw new Win32Exception(res & 0xFFFF);
            }

            return Marshal.PtrToStringUni(buffer) ?? "";
        }
        finally
        {
            Marshal.FreeCoTaskMem(buffer);
        }
    }

    public int Notify(
        nint buffer,
        int length,
        string contentName,
        string appName)
    {
        Dll.Log($"Notify '{contentName}' '{appName}'");
        return 0;
    }
}
